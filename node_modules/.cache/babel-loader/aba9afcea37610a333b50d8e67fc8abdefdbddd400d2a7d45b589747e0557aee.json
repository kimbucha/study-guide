{"ast":null,"code":"var _jsxFileName = \"/Users/tuan/React/study-guide-chatbot/study-guide/src/components/StudyGuideChatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { generateStudyPlan } from '../services/studyPlanService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StudyGuideChatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleSendMessage = async e => {\n    e.preventDefault();\n    if (inputMessage.trim() === '') return;\n    const userMessage = {\n      id: uuidv4(),\n      content: inputMessage,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n    try {\n      const studyPlanRequest = parseStudyPlanRequest(inputMessage);\n      const studyPlan = await generateStudyPlan(studyPlanRequest.topic, studyPlanRequest.duration);\n      const botMessage = {\n        id: uuidv4(),\n        content: studyPlan,\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error generating study plan:', error);\n      const errorMessage = {\n        id: uuidv4(),\n        content: 'Sorry, I encountered an error while generating the study plan. Please try again.',\n        sender: 'bot',\n        timestamp: new Date()\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const parseStudyPlanRequest = message => {\n    const parts = message.split(',');\n    if (parts.length !== 2) {\n      throw new Error('Invalid input format. Please use: topic, duration');\n    }\n    const topic = parts[0].trim();\n    const duration = parseInt(parts[1].trim(), 10);\n    if (isNaN(duration)) {\n      throw new Error('Invalid duration. Please provide a number.');\n    }\n    return {\n      topic,\n      duration\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-2xl mx-auto p-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white shadow-md rounded-lg max-w-lg w-full mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 h-80 overflow-y-auto\",\n        children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `mb-4 ${message.sender === 'user' ? 'text-right' : 'text-left'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `inline-block p-2 rounded-lg ${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`,\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, message.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: messagesEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendMessage,\n        className: \"p-4 border-t flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          placeholder: \"Enter topic, duration (e.g., 'JavaScript, 7')\",\n          className: \"flex-grow py-2 px-4 mr-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\",\n          disabled: isLoading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"bg-blue-500 text-white py-2 px-4 rounded-full font-semibold focus:outline-none hover:bg-blue-600 transition-colors\",\n          disabled: isLoading,\n          children: isLoading ? 'Generating...' : 'Send'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(StudyGuideChatbot, \"f+uaimTb6IX5z+qjNoK9mHQEhR8=\");\n_c = StudyGuideChatbot;\nexport default StudyGuideChatbot;\nvar _c;\n$RefreshReg$(_c, \"StudyGuideChatbot\");","map":{"version":3,"names":["React","useState","useRef","useEffect","v4","uuidv4","generateStudyPlan","jsxDEV","_jsxDEV","StudyGuideChatbot","_s","messages","setMessages","inputMessage","setInputMessage","isLoading","setIsLoading","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","e","preventDefault","trim","userMessage","id","content","sender","timestamp","Date","prevMessages","studyPlanRequest","parseStudyPlanRequest","studyPlan","topic","duration","botMessage","error","console","errorMessage","message","parts","split","length","Error","parseInt","isNaN","className","children","map","fileName","_jsxFileName","lineNumber","columnNumber","ref","onSubmit","type","value","onChange","target","placeholder","disabled","_c","$RefreshReg$"],"sources":["/Users/tuan/React/study-guide-chatbot/study-guide/src/components/StudyGuideChatbot.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { generateStudyPlan } from '../services/studyPlanService';\nimport { ChatMessage, StudyPlanRequest } from '../types/chatTypes';\n\nconst StudyGuideChatbot: React.FC = () => {\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  const handleSendMessage = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (inputMessage.trim() === '') return;\n\n    const userMessage: ChatMessage = {\n      id: uuidv4(),\n      content: inputMessage,\n      sender: 'user',\n      timestamp: new Date(),\n    };\n\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const studyPlanRequest = parseStudyPlanRequest(inputMessage);\n      const studyPlan = await generateStudyPlan(studyPlanRequest.topic, studyPlanRequest.duration);\n\n      const botMessage: ChatMessage = {\n        id: uuidv4(),\n        content: studyPlan,\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error generating study plan:', error);\n      const errorMessage: ChatMessage = {\n        id: uuidv4(),\n        content: 'Sorry, I encountered an error while generating the study plan. Please try again.',\n        sender: 'bot',\n        timestamp: new Date(),\n      };\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const parseStudyPlanRequest = (message: string): StudyPlanRequest => {\n    const parts = message.split(',');\n    if (parts.length !== 2) {\n      throw new Error('Invalid input format. Please use: topic, duration');\n    }\n    const topic = parts[0].trim();\n    const duration = parseInt(parts[1].trim(), 10);\n    if (isNaN(duration)) {\n      throw new Error('Invalid duration. Please provide a number.');\n    }\n    return { topic, duration };\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4\">\n      <div className=\"bg-white shadow-md rounded-lg max-w-lg w-full mx-auto\">\n        <div className=\"p-4 h-80 overflow-y-auto\">\n          {messages.map(message => (\n            <div \n              key={message.id} \n              className={`mb-4 ${\n                message.sender === 'user' ? 'text-right' : 'text-left'\n              }`}\n            >\n              <div \n                className={`inline-block p-2 rounded-lg ${\n                  message.sender === 'user' \n                    ? 'bg-blue-500 text-white' \n                    : 'bg-gray-200 text-gray-700'\n                }`}\n              >\n                {message.content}\n              </div>\n            </div>\n          ))}\n          <div ref={messagesEndRef} />\n        </div>\n        <form onSubmit={handleSendMessage} className=\"p-4 border-t flex\">\n          <input\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            placeholder=\"Enter topic, duration (e.g., 'JavaScript, 7')\"\n            className=\"flex-grow py-2 px-4 mr-2 rounded-full border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            disabled={isLoading}\n          />\n          <button \n            type=\"submit\" \n            className=\"bg-blue-500 text-white py-2 px-4 rounded-full font-semibold focus:outline-none hover:bg-blue-600 transition-colors\"\n            disabled={isLoading}\n          >\n            {isLoading ? 'Generating...' : 'Send'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default StudyGuideChatbot;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}